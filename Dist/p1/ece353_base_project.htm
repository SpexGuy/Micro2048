<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ece353_base_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ece353_base_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue May 06 23:04:28 2014
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; drawAnimations &rArr; drawAnimation &rArr; drawAARect &rArr; drawAACorners &rArr; percentAdd &rArr; nMix
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[6a]">DisableInterrupts</a>
 <LI><a href="#[6b]">EnableInterrupts</a>
 <LI><a href="#[26]">StartCritical</a>
 <LI><a href="#[2d]">EndCritical</a>
 <LI><a href="#[6c]">WaitForInterrupt</a>
 <LI><a href="#[6d]">getHeapBase</a>
 <LI><a href="#[6e]">getHeapSize</a>
 <LI><a href="#[6f]">getStackBase</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 50 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">SYSTICKIntHandler</a> from systick.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4c]">endMergeTranslate</a> from 2048.o(.text) referenced from 2048.o(.text)
 <LI><a href="#[49]">fadeToColor</a> from 2048.o(.text) referenced from 2048.o(.text)
 <LI><a href="#[5]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">showTile</a> from 2048.o(.text) referenced 2 times from 2048.o(.text)
 <LI><a href="#[a]">startFadeAnim</a> from main.o(.text) referenced 2 times from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[64]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[66]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[67]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[68]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[69]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6a]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2d]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[6c]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>getHeapBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>getHeapSize</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>getStackBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>startFadeAnim</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = startFadeAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>startTranslateAnim</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>

<P><STRONG><a name="[e]"></a>stringify</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBLerpFracs
</UL>

<P><STRONG><a name="[d]"></a>printBLerpFracs</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringify
</UL>

<P><STRONG><a name="[10]"></a>checkInput</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = checkInput &rArr; shiftUp &rArr; spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftUp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftLeft
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftDown
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getButton
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>main</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; drawAnimations &rArr; drawAnimation &rArr; drawAARect &rArr; drawAACorners &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRefreshRate
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateButtons
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimations
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapBuffers
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDoubleBuffers
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init2048
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrawBuffer
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAnimations
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearDrawBuffer
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandomTile
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16]"></a>initBoard</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, initboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = initBoard &rArr; initializeSPI
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInitPolling
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSysTick
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSPI
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeGpioPins
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeADC
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortC
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>SYSTICKIntHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSTICKIntHandler &rArr; updateRow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>initializeSysTick</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2b]"></a>initializeADC</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, hw4_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2f]"></a>GetADCval</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hw4_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRefreshRate
</UL>

<P><STRONG><a name="[23]"></a>updateRefreshRate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hw4_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBrightness
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADCval
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>getButton</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw4_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
</UL>

<P><STRONG><a name="[24]"></a>updateButtons</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, hw4_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = updateButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>initializeGpioPins</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, hw4_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[1f]"></a>getDrawBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, doublebuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapBuffers
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearDrawBuffer
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>swapBuffers</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, doublebuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swapBuffers
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentBuffer
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrawBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDoubleBuffers
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>initDoubleBuffers</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, doublebuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initDoubleBuffers &rArr; swapBuffers
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>clearDrawBuffer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, doublebuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clearDrawBuffer &rArr; clearFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFrame
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDrawBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>clearFrame</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clearFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearDrawBuffer
</UL>

<P><STRONG><a name="[34]"></a>drawAACorners</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drawAACorners &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAARect
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAAPixel
</UL>

<P><STRONG><a name="[37]"></a>drawAAPixel</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAACorners
</UL>

<P><STRONG><a name="[38]"></a>drawAAEdges</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawAAEdges &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAARect
</UL>

<P><STRONG><a name="[39]"></a>drawRect</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drawRect &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAARect
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
</UL>

<P><STRONG><a name="[3a]"></a>drawAARect</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = drawAARect &rArr; drawAACorners &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRect
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAAEdges
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAACorners
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAnimation
</UL>

<P><STRONG><a name="[3c]"></a>nMix</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pixel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nMix
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
</UL>

<P><STRONG><a name="[3b]"></a>mix</STRONG> (Thumb, 24 bytes, Stack size 28 bytes, pixel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mix &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nMix
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimation
</UL>

<P><STRONG><a name="[3e]"></a>nComplement</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pixel.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complement
</UL>

<P><STRONG><a name="[3d]"></a>complement</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pixel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nComplement
</UL>

<P><STRONG><a name="[3f]"></a>nMultiply</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pixel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
</UL>

<P><STRONG><a name="[35]"></a>multiply</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, pixel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = multiply
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nMultiply
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAAEdges
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAACorners
</UL>

<P><STRONG><a name="[41]"></a>nAdd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pixel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;percentAdd
</UL>

<P><STRONG><a name="[40]"></a>add</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, pixel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nAdd
</UL>

<P><STRONG><a name="[36]"></a>percentAdd</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, pixel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nAdd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nMultiply
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nMix
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRect
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAAEdges
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAACorners
</UL>

<P><STRONG><a name="[70]"></a>setColor</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pixel.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>gammaCorrect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, renderer.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>updateRow</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, renderer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = updateRow
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICKIntHandler
</UL>

<P><STRONG><a name="[31]"></a>setCurrentBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, renderer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapBuffers
</UL>

<P><STRONG><a name="[72]"></a>getCurrentBuffer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, renderer.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>setBrightness</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, renderer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateRefreshRate
</UL>

<P><STRONG><a name="[73]"></a>getBrightness</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, renderer.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>noFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, animation.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>scheduleAnimation</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTile
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fadeToColor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTranslateAnim
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startFadeAnim
</UL>

<P><STRONG><a name="[43]"></a>updateAnimation</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = updateAnimation &rArr; mix &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimations
</UL>

<P><STRONG><a name="[45]"></a>addNewAnimations</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, animation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimations
</UL>

<P><STRONG><a name="[1d]"></a>updateAnimations</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = updateAnimations &rArr; updateAnimation &rArr; mix &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addNewAnimations
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimation
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>drawAnimation</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = drawAnimation &rArr; drawAARect &rArr; drawAACorners &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAARect
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAnimations
</UL>

<P><STRONG><a name="[21]"></a>drawAnimations</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, animation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = drawAnimations &rArr; drawAnimation &rArr; drawAARect &rArr; drawAACorners &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>countEmpty</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = countEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandomTile
</UL>

<P><STRONG><a name="[53]"></a>getNthEmptyTile</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getNthEmptyTile
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandomTile
</UL>

<P><STRONG><a name="[48]"></a>showTile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 2048.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> 2048.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>fadeToColor</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = fadeToColor &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endMergeTranslate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 2048.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>addTile</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = addTile &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandomTile
</UL>

<P><STRONG><a name="[4f]"></a>setPos</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setPos
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
</UL>

<P><STRONG><a name="[4b]"></a>removeTile</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removeTile &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
</UL>

<P><STRONG><a name="[50]"></a>canTakeInput</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = canTakeInput
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftUp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftLeft
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftDown
</UL>

<P><STRONG><a name="[4c]"></a>endMergeTranslate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = endMergeTranslate &rArr; fadeToColor &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fadeToColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 2048.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>spawnMergeAnim</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = spawnMergeAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTile
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftUp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftLeft
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftDown
</UL>

<P><STRONG><a name="[4e]"></a>spawnTranslateAnim</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPos
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftUp
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftRight
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftLeft
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shiftDown
</UL>

<P><STRONG><a name="[18]"></a>init2048</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init2048
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>shiftUp</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = shiftUp &rArr; spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTakeInput
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
</UL>

<P><STRONG><a name="[13]"></a>shiftDown</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = shiftDown &rArr; spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTakeInput
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
</UL>

<P><STRONG><a name="[15]"></a>shiftLeft</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = shiftLeft &rArr; spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTakeInput
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
</UL>

<P><STRONG><a name="[14]"></a>shiftRight</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = shiftRight &rArr; spawnTranslateAnim &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnTranslateAnim
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spawnMergeAnim
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canTakeInput
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkInput
</UL>

<P><STRONG><a name="[19]"></a>addRandomTile</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = addRandomTile &rArr; addTile &rArr; scheduleAnimation &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTile
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNthEmptyTile
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>drawBoard</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, 2048.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = drawBoard &rArr; drawRect &rArr; percentAdd &rArr; nMix
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>spiTx</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
</UL>

<P><STRONG><a name="[54]"></a>initializePortASpi0</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSPI
</UL>

<P><STRONG><a name="[2c]"></a>initializeSPI</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = initializeSPI
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializePortASpi0
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[55]"></a>spi_eeprom_read_status</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
</UL>

<P><STRONG><a name="[57]"></a>spi_eeprom_wait_write_in_progress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_eeprom_wait_write_in_progress &rArr; spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_read_byte
</UL>

<P><STRONG><a name="[1c]"></a>spi_eeprom_read_byte</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_eeprom_read_byte &rArr; spi_eeprom_wait_write_in_progress &rArr; spi_eeprom_read_status &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_wait_write_in_progress
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>spi_eeprom_write_disable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_eeprom_write_disable &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[59]"></a>spi_eeprom_write_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_eeprom_write_enable &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_byte
</UL>

<P><STRONG><a name="[1b]"></a>spi_eeprom_write_byte</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_eeprom_write_byte &rArr; spi_eeprom_write_enable &rArr; spiTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_eeprom_write_disable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTx
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>PLL_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[2a]"></a>uartInitPolling</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartInitPolling
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[75]"></a>uartRxPoll</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>uartTxPoll</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBLerpFracs
</UL>

<P><STRONG><a name="[28]"></a>initPortC</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, portc_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandomTile
</UL>

<P><STRONG><a name="[76]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFrame
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDoubleBuffers
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init2048
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[7a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[7b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[46]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeTile
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAnimations
</UL>

<P><STRONG><a name="[42]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTile
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduleAnimation
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[63]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
